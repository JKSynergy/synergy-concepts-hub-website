// Simplified Prisma schema for SQLite compatibility
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../backend/prisma/dev.db"
}

// User model for authentication
model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        String   @default("LOAN_OFFICER")
  status      String   @default("ACTIVE")
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  borrowersCreated    Borrower[]       @relation("CreatedBy")
  loansManaged        Loan[]           @relation("LoanOfficer")
  applicationsReviewed LoanApplication[] @relation("ReviewedBy")

  @@map("users")
}

// Borrower model
model Borrower {
  id                String   @id @default(uuid())
  borrowerId        String   @unique
  firstName         String
  lastName          String
  phone             String   @unique
  email             String?
  gender            String?
  dateOfBirth       DateTime?
  nationalId        String?  @unique
  district          String?
  subcounty         String?
  village           String?
  occupation        String?
  monthlyIncome     Float?
  creditRating      String   @default("NO_CREDIT")
  status            String   @default("ACTIVE")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String
  
  createdBy         User     @relation("CreatedBy", fields: [createdById], references: [id])
  loans             Loan[]
  applications      LoanApplication[]
  repayments        Repayment[]
  savings           Savings[]

  @@map("borrowers")
}

// Loan Application model
model LoanApplication {
  id                String   @id @default(uuid())
  applicationId     String   @unique
  borrowerId        String
  requestedAmount   Float
  purpose           String
  termMonths        Int
  status            String   @default("PENDING")
  submittedAt       DateTime @default(now())
  reviewedAt        DateTime?
  reviewedById      String?
  approvedAmount    Float?
  rejectionReason   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  reviewedBy        User?    @relation("ReviewedBy", fields: [reviewedById], references: [id])
  loan              Loan?    @relation("ApplicationLoan")

  @@map("loan_applications")
}

// Loan model
model Loan {
  id                String   @id @default(uuid())
  loanId            String   @unique
  applicationId     String?  @unique
  borrowerId        String
  loanOfficerId     String
  principal         Float
  interestRate      Float
  termMonths        Int
  totalInterest     Float
  totalAmount       Float
  monthlyPayment    Float
  status            String   @default("PENDING")
  purpose           String?
  disbursedAt       DateTime?
  disbursedAmount   Float?
  outstandingBalance Float   @default(0)
  nextPaymentDate   DateTime?
  nextPaymentAmount Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  application       LoanApplication? @relation("ApplicationLoan", fields: [applicationId], references: [id])
  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  loanOfficer       User     @relation("LoanOfficer", fields: [loanOfficerId], references: [id])
  repayments        Repayment[]

  @@map("loans")
}

// Repayment model
model Repayment {
  id                String   @id @default(uuid())
  receiptNumber     String   @unique
  loanId            String
  borrowerId        String
  amount            Float
  principalAmount   Float?
  interestAmount    Float?
  paymentMethod     String
  transactionId     String?
  status            String   @default("COMPLETED")
  paidAt            DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  loan              Loan     @relation(fields: [loanId], references: [id])
  borrower          Borrower @relation(fields: [borrowerId], references: [id])

  @@map("repayments")
}

// Savings model
model Savings {
  id                String   @id @default(uuid())
  savingsId         String   @unique
  borrowerId        String
  balance           Float    @default(0)
  interestRate      Float    @default(0)
  status            String   @default("ACTIVE")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  borrower          Borrower @relation(fields: [borrowerId], references: [id])

  @@map("savings")
}

// Expense model
model Expense {
  id                String   @id @default(uuid())
  expenseId         String   @unique
  description       String
  amount            Float
  category          String
  expenseDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("expenses")
}